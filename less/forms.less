// Form Elements
//
// Interactive elements relating to forms.
//
// Styleguide Elements.Forms


@import (reference) 'https://digitallinguistics.blob.core.windows.net/less/colors.less';
@import (reference) 'https://digitallinguistics.blob.core.windows.net/less/variables.less';
@import (reference) 'https://digitallinguistics.blob.core.windows.net/less/components.less';


// Button
//
// A basic button.
//
// Markup: button.hbs
//
// :active      - When the button is clicked
// :disabled    - When the button is disabled
// :focus       - When the button is focused
// :hover       - When the user hovers over the button
// .button-red - A red button
//
// Styleguide Elements.Forms.button
.button {

  .blue-background;
  align-items: center;
  background-image: linear-gradient(135deg, rgba(255,255,255,0.15), transparent);
  border: 0;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-button);
  cursor: pointer;
  font: inherit;
  outline: 0;
  padding: var(--padding-text);
  text-align: center;

  &:active {
    --shadow-button: 0 0 0 0.075em rgba(0,0,0,0.15) inset, 0 0 0.5em rgba(0,0,0,0.2) inset;
  }

  &:hover, &:focus {
    background-image: linear-gradient(135deg, transparent, rgba(0,0,0,0.15));
  }

  &:disabled {
    background-image: none;
    box-shadow: none;
    cursor: not-allowed;
    opacity: 0.40;
  }

  &-red {
    .red-background;
  }

}

// Fieldset
//
// Used for grouping inputs together under a heading (<code>&lt;legend&gt;</code>). Remember that flexbox does not work well with <code>&lt;fieldset&gt;</code>, so you may need to wrap the items inside <code>&lt;fieldset&gt;</code> in a <code>&lt;div&gt;</code>.
//
// Markup: fieldset.hbs
//
// Styleguide Elements.Forms.fieldset
.fieldset {

  border: var(--border);
  border-radius: var(--border-radius);

  legend {
    font-weight: var(--bold);
  }

}

// Input Elements
//
// Form input elements. Adding the `.input` clas to any `<input>` element will style that element as appropriate for its input type.
//
// Styleguide Elements.Forms.Inputs
.input {

  // Button Input
  //
  // Markup: input-button.hbs
  //
  // Styleguide Elements.Forms.Inputs.button
  &[type=button] {
    .button;
  }

  // Checkbox Input
  //
  // Markup: input-checkbox.hbs
  //
  // Styleguide Elements.Forms.Inputs.checkbox
  &[type=checkbox] {
    align-self: center;
    max-height: 1rem;
    max-width: 1rem;
  }

  // Color Input
  //
  // Markup: input-color.hbs
  //
  // Styleguide Elements.Forms.Inputs.color
  &[type=color] {
    display: block;
  }

  // Date Input
  //
  // Markup: input-date.hbs
  //
  // Styleguide Elements.Forms.Inputs.date
  &[type=date] {
    .field;
  }

  // Datetime Input
  //
  // Markup: input-datetime.hbs
  //
  // Styleguide Elements.Forms.Inputs.datetime
  &[type=datetime] {
    .field;
  }

  // Local Datetime Input
  //
  // Markup: input-datetime-local.hbs
  //
  // Styleguide Elements.Forms.Inputs.datetime-local
  &[type=datetime-local] {
    .field;
  }

  // Email Input
  //
  // Markup: input-email.hbs
  //
  // Styleguide Elements.Forms.Inputs.email
  &[type=email] {
    .field;
  }

  // File Input
  //
  // You may often want to hide this element entirely, display another element instead (like a button), and use JavaScript to click the file input when the button is pressed.
  //
  // Markup: input-file.hbs
  //
  // Styleguide Elements.Forms.Inputs.file
  &[type=file] {}

  // Hidden Input
  //
  // Markup: input-hidden.hbs
  //
  // Styleguide Elements.Forms.Inputs.hidden
  &[type=hidden] {}

  // Image Input
  //
  // Markup: input-image.hbs
  //
  // Styleguide Elements.Forms.Inputs.image
  &[type=image] {}

  // Month Input
  //
  // Markup: input-month.hbs
  //
  // Styleguide Elements.Forms.Inputs.month
  &[type=month] {
    .field;
  }

  // Number Input
  //
  // Markup: input-number.hbs
  //
  // Styleguide Elements.Forms.Inputs.number
  &[type=number] {
    .field;
  }

  // Password Input
  //
  // Markup: input-password.hbs
  //
  // Styleguide Elements.Forms.Inputs.password
  &[type=password] {
    .field;
  }

  // Radio Input
  //
  // Markup: input-radio.hbs
  //
  // Styleguide Elements.Forms.Inputs.radio
  &[type=radio] {
    align-self: center;
    max-height: 1rem;
    max-width: 1rem;
  }

  // Range Input
  //
  // Markup: input-range.hbs
  //
  // Styleguide Elements.Forms.Inputs.range
  &[type=range] {
    align-self: center;
  }

  // Reset Button
  //
  // Markup: input-reset.hbs
  //
  // Styleguide Elements.Forms.Inputs.reset
  &[type=reset] {
    .button;
    .superdarkgreen-background;
  }

  // Search Input
  //
  // Markup: input-search.hbs
  //
  // Styleguide Elements.Forms.Inputs.search
  &[type=search] {
    .field;
  }

  // Submit Button
  //
  // Markup: input-submit.hbs
  //
  // Styleguide Elements.Forms.Inputs.submit
  &[type=submit] {
    .button;
  }

  // Telephone Input
  //
  // Markup: input-tel.hbs
  //
  // Styleguide Elements.Forms.Inputs.tel
  &[type=tel] {
    .field;
  }

  // Text Input
  //
  // Markup: input-text.hbs
  //
  // Styleguide Elements.Forms.Inputs.text
  &[type=text] {
    .field;
  }

  // Time Input
  //
  // Markup: input-time.hbs
  //
  // Styleguide Elements.Forms.Inputs.time
  &[type=time] {
    .field;
  }

  // URL Input
  //
  // Markup: input-url.hbs
  //
  // Styleguide Elements.Forms.Inputs.url
  &[type=url] {
    .field;
  }

  // Week Input
  //
  // Markup: input-week.hbs
  //
  // Styleguide Elements.Forms.Inputs.week
  &[type=week] {
    .field;
  }

}

// Label
//
// Label elements. If the text inside the element is wrapped in a `span` or header element, that text will be styled as well.
//
// Markup: label.hbs
//
// Styleguide Elements.Forms.label
.label {

  align-items: center;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  h1, h2, h3, h4, h5, h6,
  span
  {
    font-size: smaller;
    font-weight: var(--bold);
    padding: var(--padding-text);
  }

  p {
    padding: var(--padding-text);
  }

}

// Select
//
// Default styling for `<select>` elements.
//
// Markup: select.hbs
//
// Styleguide Elements.Forms.select
.select {
  border: var(--border);
  --border-color: var(--gray);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-button);
  padding: var(--padding-text);
  &:focus { outline: none; }
}

// Textarea
//
// `<textarea>` elements use the same styling as text inputs.
//
// Markup: textarea.hbs
//
// Styleguide Elements.Forms.textarea
.textarea {
  .field;
}
